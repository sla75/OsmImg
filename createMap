#!/bin/bash
function timering {
	local last=$(date +%s)
	last=$(($last-$tt))
	echo "Running time is $last seconds."
}
function helpMap {
	echo -e "Usage: $0 -a name [-l name] [-d] [-nd]" >&2
	echo -e "\t-a,  --area nameofarea\tprocess area to img" >&2
	echo -e "\t-b,  --bounds\tcompile with bounds tag" >&2
	echo -e "\t-d,  --debug\tMore detailed statement" >&2
	echo -e "\t-s,  --style\tProcess current style" >&2
	echo -e "\t-nd, --nodownload\t\tDisable downloads" >&2
	echo -e "Exit status:" >&2
	echo -e "\t0     - Processed" >&2
	echo -e "\tother - Other error" >&2
	echo -e "\nExample:" >&2
	echo -e "\t$0 -d -a czech -s MTBsign\n" >&2
	memfree=$(grep MemFree /proc/meminfo | awk '{print $2}')
	printf "MemFree: %20sMB\n" $((memfree/1024))
	echo -e "\tAreas:"
	for entry in "${patharea}"/* ;do
		if [[ -f "$entry" && "${entry##*.}" = "parameters" ]];then
			entry="${entry%.*}"
			echo -e "\t\t${entry##*/}"
		fi
	done
	echo -e "\tStyles:"
	find "${pathstyle}"/* -maxdepth 0 -type d,l | while read entry ;do
#		entry="${entry%.*}"
		echo -e "\t\t${entry##*/}"
	done
}
tt=$(date +%s)
trap 'timering' EXIT

style=mapnik
bounds=false
debug=false
nodownload=false
root=$(dirname "${0}")
patharea="${root}/area"
pathcache="${root}/cache"
pathstyle="${root}/style"
pathpolygon="${root}/polygon"
tmpdir=$(dirname $(mktemp -u))

oldtime="-10 month"
verbose=""
if [ "$#" -eq 0 ]; then
	helpMap
	exit 0;
fi
while [[ $# -gt 0 ]]; do
	key="$1"
	case $key in
	-a|--area)
		area=${2,,}
		shift # past argument
		shift # past value
		;;
	-s|--style)
		style=${2}
		shift # past argument
		shift # past value
		;;
	-b|--bounds)
		bounds=true
		shift # past value
		;;
	-d|--debug)
		debug=true
		verbose="--verbose"
		shift # past value
		;;
	-nd|--nodownload)
		nodownload=true
		shift # past value
		;;
	--help|*)
		helpMap
		exit 1
		;;
	esac
done

function exitmsg {
	echo -e ${1}" (${2:-0})" >&2 ; exit ${2:-0}
}
function msg {
#	${debug} && echo -e ${*}
	echo -e ${*}
}

function showFileTime {
	[ ! -e $1 ] && return 1;
	stat -L --format %Y ${1} | { read gmt ; echo `date -d "@$gmt" "+%F %T"`" "`basename ${1}`; }
}

function checkModifFile {
	[[ ! -e ${2} ]] && return 0;
	[[ ${2} -ot ${3} ]] && return 0;
	[[ ${1} -nt ${2} ]] && return 0;
	return 1;
}

function checkPrgsMkgmap {
	local prg=${1,,}
	[[ ! $prg =~ ^(mkgmap|splitter)$ ]]  && exitmsg "Bad program $prg!" 1
	local file="${pathcache}/${prg}-latest.zip"
	local url="https://www.mkgmap.org.uk/download/${prg}-latest.zip"
	${root}/bin/curletag ${v} --filetime "-1 day" --etagtime "-1 hour" --file ${file} ${url}
	if [ $? -eq 1 ]; then
		unzip -o -q -d "${pathcache}" ${file} || return 1
		# Create symlink
		while read line; do
			unlink "${pathcache}/${prg}" 2>/dev/null
			${debug} && echo "Create symlink ${line} ${prg}"
			ln ${v} -s -r ${line} ${pathcache}/${prg} 2>/dev/null || return 1
			break;
		done < <(ls -td ${pathcache}/${prg}-r*)
		if [[ $prg =~ ^mkgmap$ ]]; then
			cp -r ${pathcache}/mkgmap/examples/styles/default ${pathstyle}/
			mv -v ${pathstyle}/default ${pathstyle}/mapnik
			cp -v ${pathcache}/mkgmap/examples/typ-files/mapnik.txt ${pathstyle}/mapnik/
		fi;
	fi;
	if [ -L ${pathcache}/${prg} ]; then
		ls -l ${pathcache}/${prg}
	else
		echo -e "${prg,^^} not found!" >&2
		return 1
	fi;
}

######################################## POLYGON #######################################################################
function polygoneded {
	local srcfile1=$1;
	#local outputpolygonfile="${srcfile1%%-*}-${area}-${srcfile1##*-}"
	local outputpolygonfile=${2}
	if [ -n "${area}" ]; then
		echo -e "\n#### Polygon ${area} from ${srcfile1}"
		polygonfile=${tmpdir}/${area}".poly"
		if [[ ! -e ${polygonfile} || ${polygonfile} -ot ${pathpolygon}/${area}.gpx ]]; then
			echo -e "\tCreate polygon from ${pathpolygon}/${area}.gpx"
			${root}/bin/gpx2poly ${pathpolygon}/${area}.gpx > ${polygonfile} || exitmsg "Bad create polygon file from ${pathpolygon}/${area}.gpx to ${polygonfile}" 1
		fi;
		[[ -e ${polygonfile} ]] || msg "\t${polygonfile} not exists!" 1

		echo checkModifFile ${srcfile1} ${outputpolygonfile} ${polygonfile}
		if checkModifFile ${srcfile1} ${outputpolygonfile} ${polygonfile}; then
			echo -e "\tCreate PBF polygon from '${area}' to ${outputpolygonfile}"
			echo "osmconvert ${verbose} ${srcfile1} -B=${polygonfile} -o=${outputpolygonfile}"
			osmconvert ${verbose} ${srcfile1} -B=${polygonfile} -o=${outputpolygonfile}
		else 
			echo -e "\tNo change ${srcfile1}"
		fi;
		echo -e "\tPolygoned "${outputpolygonfile}
	else
		echo -e "\tNot area"
		cp -v ${srcfile1} ${outputpolygonfile}
	fi;
}


echo -e "\n### "`date '+%F %T'`" START"
echo -e "\n### 0. Check parameters..."

[ -z ${area} ] && exitmsg "The parameter area is obligatory. Use $0 --help" 1

tmpimg="${tmpdir}/${area}"
name="${area^^}-${style}"
msg "ROOT: ${root}"
msg "      Name: ${name} "
msg "      Area: ${area} "
msg "     Style: ${style}"
msg "     Debug: ${debug}"
msg "     Bounds: ${bounds}"
msg "NoDownload: ${nodownload}"

imgname=${name^}

[ ! -d ${patharea} ] && mkdir -p ${patharea}
[ ! -d ${pathcache} ] && mkdir -p ${pathcache}
[ ! -d ${pathstyle} ] && mkdir -p ${pathstyle}

echo -e "\n### 0.1 Check ${area}.parameters"
[ ! -e ${patharea}/${area}.parameters ] && exitmsg "Parameters for area '${patharea}/${area}.parameters' not found!" 1;
msg ${patharea}/${area}.parameters
source ${patharea}/${area}.parameters

pid=$(grep ${style} ${pathstyle}/style.fid 2>/dev/null | cut -d'=' -f2)
pid=${pid:-0}
imgfid=$((imgfid+pid))

echo -e "FID: ${imgfid}"
echo -e "url: ${url}"

#[ ! -e ${patharea}/${area}.mkgmap ] && exitmsg "Config mkgmap for area '${patharea}/${area}.mkgmap' not found!" 1;


echo -e "\n### 1. Check splitter"
checkPrgsMkgmap splitter || exit 1;

echo -e "\n### 2. Check mkgmap"
checkPrgsMkgmap mkgmap || exit 1;


function donwloadsArea {
	local file=$1;
	${root}/bin/curletag -ft "-4 hour" -fe "-2 hour" -f ${file} ${2}
	local status=$?
	case ${status} in
		0)
			echo "File ${1} exists and no change."
			;;
		1)
			echo "Downloaded ${2}"
			;;
		*)
			return $status;
	esac;
#	checkModifFile ${file} ${file}.polygoned && polygoneded ${file}
	return 0;
}
srcfile=${pathcache}/${area}.osm.pbf
if [[ ${nodownload}=false && -n "${url}" ]]; then
	echo "Size download url: ${#url[@]}"
	i=0;
	for link in "${url[@]}"; do
		i=$((i+1))
		echo -e "\n### 3.$i Check download ${link}"
		#${root}/bin/curletag -ft "-4 hour" -fe "-2 hour" -f ${urlfile} ${link}
		downloadfile=${pathcache}/${link##*/}
		outputpolygonfile="${downloadfile%%-*}-${area}-${downloadfile##*-}"
		donwloadsArea "${downloadfile}" "${link}"
		polygoneded ${downloadfile} ${outputpolygonfile}
		if [ $i -eq 1 ]; then
			cp -v ${downloadfile} ${srcfile}
		else
			echo -e "\n### 3.$i MERGE ${downloadfile} to ${srcfile}"
			mv -v "${srcfile}" "${srcfile%.*}.tmp"
			echo -e "\tosmconvert ${srcfile%.*}.tmp --out-o5m | osmconvert - ${outputpolygonfile} -o=${srcfile}"
			osmconvert ${srcfile%.*}.tmp --out-o5m | osmconvert - ${outputpolygonfile} -o=${srcfile}
		fi;
	done
else
	[ -n "${url}" ] && msg "### 3. No url."
	[ ! ${nodownload} ] && msg "### 3. Disable download by parameter -nd."
fi;

if [ -e "${srcfile%.*}.osm" ]; then
	if [ "${srcfile%.*}.osm" -nt "${srcfile}" ]; then
    	osmconvert -v "${srcfile%.*}.osm" -o=${srcfile}
		rm -rvf "${tmpdir}/img_${area}"
	fi
fi

showFileTime ${srcfile} || exitmsg "Source file ${srcfile} not found!" 1



######################################## TODO Filter ###################################################################
#srctmpfile_flt=cache/${polygonname}".filtered"
#if [[ -n "${filter}" && -e ${filter} ]]; then
#	if checkModifFile ${srctmpfile_plg} ${srctmpfile_flt} ${filter}; then
#		echo -e "\n### 5. Create filter from '${filter}' to ${srctmpfile_plg}"
#		echo -n "TODO FILTERED "`date '+%F %T'` > ${srctmpfile_flt}
#	else
#		msg "\n### 5. No need to filtered by ${polygon}"
#	fi;
#else
#	msg "###. 5 Filter not exists."
#	srctmpfile_flt=${srctmpfile_plg}
#fi;

#srcfile=${srctmpfile_flt}
showFileTime ${srcfile} || exitmsg "Source file ${srcfile} not found(2)!" 1

function execjar {
	local prg=$1
	shift;
	[[ ! $prg =~ ^(mkgmap|splitter)$ ]] && exitmsg "Bad program $prg!" 1
	[[ "${debug}" == "true" && -f "${root}/logger.txt" ]] && local log="-Dlog.config=${root}/logger.txt"

	#-Xms2048m -Xmx4096m
	local memfree=$(grep MemFree /proc/meminfo | awk '{print $2}')
	echo -e "\t############################################"
	printf "\t############### %6s%-6s ###############\n" \
		`echo ${prg^^} | cut -c 1-$((${#prg}/2))` \
		`echo ${prg^^} | cut -c $((${#prg}/2+1))-${#prg}`
	printf "\t###   MemFree: %20sMB    ###\n" $(($memfree/1024))
	echo -e "\t############################################\n"
	memfree=$(($memfree*95/100/1024))
	#[[ $(grep MemFree /proc/meminfo | awk '{print $2}') -gt $((1024*1024*5)) ]] && mem="-Xmx4g"
	local mem="-Xmx${memfree}m"
	echo "execute> java ${mem} -XX:MaxMetaspaceSize=512m ${log} -jar ${pathcache}/${prg}/${prg}.jar $*"
	java ${mem} ${log} -jar ${pathcache}/${prg}/${prg}.jar $*
	return $?
}
function getVersion {
	[[ -e ".version~" ]] || echo -ne "0" > ".version~"
	local version=$(head -n 1 ".version~")
	version=$(($version+1))
	echo "Version $version" >&2
	echo -ne "${version}" > ".version~"	
	echo ${version}
}
function varreplace {
	local rfile=$1
	local lname=${name/-/ }
	sed -i "s/%date%/$(date +%F)/gi" ${rfile}
	sed -i "s/%datetime%/$(date +'%F %R')/gi" ${rfile}
	sed -i "s/%version%/${version}/gi" ${rfile}
	sed -i "s/%name%/${name^}/gi" ${rfile}
	sed -i "s/%year%/$(date +%Y)/gi" ${rfile}
}
function getLicenceFile {
	local licfile=""
	[ -f "${root}/licence.txt" ] && licfile="${root}/licence.txt";
	[ -f "${patharea}/${area}.licence.txt" ] && licfile="${patharea}/${area}.licence.txt";
	if [[ -n "${licfile}" && -e ${licfile} ]]; then
		local lictmp=${tmpdir}/$(basename ${licfile})
		cp -v ${licfile} ${lictmp} >&2
		varreplace ${lictmp} || exit $?
		echo "--license-file=${lictmp}"
		cat ${lictmp} >&2
		return 0
	fi;
	echo "Licence file ${patharea}/licence.txt OR ${patharea}/${area}.licence.txt not found." >&2
	return 1
}
echo -e "\n### 6. Run splitter"
yyyymm=$(date +'%Y.%m')
splitterDir="${tmpdir}/splitter_${area}"
if [[ ! -e ${splitterDir}/template.args || ${srcfile} -nt ${splitterDir}/template.args ]]; then
	[ ! -d ${splitterDir} ] && mkdir -p ${splitterDir}
	! $nodownload && ${root}/bin/curletag ${v} --filetime "-1 month" --etagtime "-1 day" \
		--file "${pathcache}/cities500.zip" "http://download.geonames.org/export/dump/cities500.zip"
	unzip -l ${pathcache}/cities500.zip &> /dev/null && geonames="--geonames-file=${pathcache}/cities500.zip"
	execjar splitter ${geonames} \
			--mapid=${imgfid}0001	\
			--status-freq=10	\
			--description=${imgabbr}_${yyyymm}	\
			--output=pbf	\
			--output-dir=${splitterDir}	\
			${srcfile} || exit 1
else
	echo -e "### The Splitter is already updated."
fi;
echo "Splitter directory: ${splitterDir}"
$debug && ls -l ${splitterDir}/

echo -e "\n### 7. Run mkgmap"

[[ -d "${pathstyle}/${style}" ]] || exitmsg "Style ${pathstyle}/${style} not found!" 2

if [ -f "${splitterDir}/template.args" ]; then
	sed -i '/description: /d' ${splitterDir}/template.args
	[ -d ${tmpdir}/img_${area} ] && rm -rf ${tmpdir}/img_${area}
	[ ! -d ${tmpdir}/img_${area} ] && mkdir -p ${tmpdir}/img_${area}
	$bounds && ${root}/bin/curletag ${v} --filetime "-1 month" --etagtime "-1 day" \
		--file "${pathcache}/bounds.zip" "http://osm.thkukuk.de/data/bounds-latest.zip"
	unzip -l ${pathcache}/bounds.zip &> /dev/null && boundstag="--bounds=${pathcache}/bounds.zip"
	
	$bounds && ${root}/bin/curletag ${v} --filetime "-1 month" --etagtime "-1 day" \
		--file "${pathcache}/sea.zip" "http://osm.thkukuk.de/data/sea-latest.zip"
	unzip -l ${pathcache}/sea.zip &> /dev/null && seatag="--precomp-sea=${pathcache}/sea.zip"

	version=$(getVersion)

	cp -v ${pathstyle}/${style}/mkgmap.args ${tmpdir}/${style}.args >&2
	varreplace ${tmpdir}/${style}.args || exit $?
#			--family-id=${imgfid}	\
	execjar mkgmap --verbose $(getLicenceFile)\
		--max-jobs	\
		--description="${imgname}_${yyyymm}.${version}"	\
		--read-config="${tmpdir}/${style}.args"	${boundstag} ${seatag}	\
		--product-version=${version}	\
		--output-dir=${tmpdir}/img_${area}	\
		--gmapsupp	\
		--read-config="${splitterDir}/template.args"	\
		${pathstyle}/${style}/${style}.txt || exit 1
	echo "Output mkgmap directory: ${tmpdir}/img_${area}"
	$debug && ls -l ${tmpdir}/img_${area}/
	[ -d ${pathcache}/imgs/ ] || mkdir -p ${pathcache}/imgs/
	pathImg=${root}/imgs/${name^}.img
	[ -d "${root}/imgs/" ] || mkdir "${root}/imgs/"
	mv -v ${tmpdir}/img_${area}/gmapsupp.img ${pathImg} || exit 1
	name=${name/-/ }
	imgsversion="${name^}, ${yyyymm} (${version})"

	echo "SET Mapsetname '${imgsversion}', FID: ${imgfid}, PID: ${pid}"
	bin/gmt -w -m "${imgsversion}" ${pathImg}

	echo bin/gmt -w -y ${imgfid},${pid} ${pathImg}
	bin/gmt -w -y ${imgfid},${pid} ${pathImg}

	echo bin/gmt -w -v -z ${imgfid},${pid}  ${pathImg}
	bin/gmt -w -v -z ${imgfid},${pid}  ${pathImg}

	bin/gmt -i ${pathImg} 2>/dev/null
	ls -l ${pathImg}
else
	errmsg "No splitter files." 1
fi;

echo -e "#####################"
echo -e "### 7. END mkgmap ###"
echo -e "#####################\n"
echo -e "${name^}\n"
msg "\n### 8. Postprocessing"

echo -e "\n### "`date '+%F %T'`" END\n"
echo -e "#####################\n###               ###\n###       OK      ###\n###               ###\n#####################\n"

####################################
filename=$(basename -- "$fullfile")
extension="${filename##*.}"
filename="${filename%.*}"
filename="${fullfile##*/}"

function check {
	local url="a"
	echo "URL '$url'"
	[ -n "${url}" ] && echo "url -n $url "
	[ -z "${url}" ] && echo "url -z $url "
	[ -e "${url}" ] && echo "url -e $url "
	[ ! -e "${url}" ] && echo "url !-e $url "
	#URL ''  url -z   url !-e
	#URL '/' url -n / url -e /
	#URL 'a' url -n a url !-e a
}


